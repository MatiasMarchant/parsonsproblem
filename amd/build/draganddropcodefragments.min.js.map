{"version":3,"file":"draganddropcodefragments.min.js","sources":["../src/draganddropcodefragments.js"],"sourcesContent":["export const init = (questionid, answerid) => {\n    let dragItem = null;\n    let draggedOver = null;\n    let initX = null;\n    let endX = null;\n    let leavingColumn = null;\n    let enteringColumn = null;\n    let content = \"\";\n    let leftColumn = document.getElementById('column' + questionid + '0');\n    let rightColumn = document.getElementById('column' + questionid + '1');\n    let answerObject = document.getElementById(answerid);\n\n    leftColumn.addEventListener('dragover', dragOverColumn);\n    leftColumn.addEventListener('dragenter', dragEnterColumn);\n    leftColumn.addEventListener('dragleave', dragLeaveColumn);\n    rightColumn.addEventListener('dragover', dragOverColumn);\n    rightColumn.addEventListener('dragenter', dragEnterColumn);\n    rightColumn.addEventListener('dragleave', dragLeaveColumn);\n    let neighborhood = leftColumn.childNodes;\n    let answerneighborhood = rightColumn.childNodes;\n    neighborhood.forEach(\n        function(codeFragment) {\n            codeFragment.draggable = true;\n            codeFragment.currentIndentation = 0;\n            codeFragment.addEventListener('dragstart', dragStart);\n            codeFragment.addEventListener('dragend', dragEnd);\n            codeFragment.addEventListener('dragover', dragOver);\n            if (codeFragment.classList.contains(\"sortable-choice-parent\")) {\n                let counter = 0;\n                codeFragment.childNodes.forEach(\n                    function(choice) {\n                        if (counter === 0) {\n                            choice.classList.add('chosen-choice');\n                        }\n                        choice.addEventListener('click', clickChoice);\n                        counter++;\n                    }\n                );\n            }\n        },\n    );\n\n    /**\n     * This event triggers when the student clicks a choice in a visually paired choice.\n     * It removes the class chosen-choice to all the same codeFragment choices\n     * then adds the class chosen-choice to the clicked choice.\n     */\n    function clickChoice() {\n        this.parentNode.childNodes.forEach(\n            function(choice) {\n                choice.classList.remove('chosen-choice');\n            }\n        );\n        this.classList.add('chosen-choice');\n        updateAnswer();\n    }\n\n    /**\n     * This function triggers whenever a sortable item gets clicked for dragging.\n     * It sets the value of initX for future indentation purposes and sets the variable\n     * dragItem to the sortable item being dragged.\n     * @param {Event} e - Click event that triggers item drag.\n     */\n    function dragStart(e) {\n        initX = e.clientX;\n        this.style.pointerEvents = \"none\";\n        dragItem = this;\n    }\n\n    /**\n     * This function triggers whenever dragging stops, it updates the final answer getting uploaded when the student ends the quiz.\n     */\n    function dragEnd() {\n        dragItem = null;\n        this.style.pointerEvents = \"all\";\n        updateAnswer();\n    }\n\n    /**\n     * This function updates the answer object considering all the info on the answer column\n     */\n    function updateAnswer() {\n        answerObject.value = \"\";\n        answerneighborhood.forEach(line => {\n            if (line.classList.contains(\"sortable-choice-parent\")) {\n                line.childNodes.forEach(\n                    function(choice) {\n                        if (choice.classList.contains(\"chosen-choice\")) {\n                            content = choice.innerHTML;\n                        }\n                    }\n                );\n            } else {\n                content = line.innerHTML;\n            }\n            let lines = content.split(/\\r\\n|\\r|\\n/g);\n            lines.forEach(function(contentline) {\n                answerObject.value =\n                answerObject.value + \"    \".repeat(line.currentIndentation) + decodeHtml(contentline) + \"\\r\\n\";\n            });\n            answerObject.value = answerObject.value.slice(0, -2); // Remove last \\r\\n\n            answerObject.value = answerObject.value + '|/';\n            content = \"\";\n        });\n        answerObject.value = answerObject.value.slice(0, -2); // Remove last '|/'\n    }\n\n    /**\n     * This function returns an HTML-decoded version of the parameter html\n     * @param {String} html - HTML encoded string\n     * @returns {String} - HTML decoded string\n     */\n    function decodeHtml(html) {\n        var txt = document.createElement(\"textarea\");\n        txt.innerHTML = html;\n        return txt.value;\n    }\n\n    /**\n     * This function triggers whenever a sortable item is being dragged over another sortable item.\n     * It sets the variable draggedOver to the sortable item being dragged over.\n     * It sets the position of the item being dragged to the position of the item being dragged over,\n     * and pushes the item being dragged over up or down depending of the initial position of the item being dragged.\n     * @param {Event} e - Click event that triggers item drag.\n     */\n    function dragOver(e) {\n        e.preventDefault();\n        draggedOver = e.target;\n        // If draggedOver is a visually paired choice, then the choices are the neighborhood and throws errors when calling moveItem\n        if (draggedOver.classList.contains(\"sortable-choice\")) {\n            draggedOver = draggedOver.parentNode;\n        }\n        moveItem(draggedOver.parentNode.childNodes);\n    }\n\n\n    /**\n     * This function is called whenever an item gets dragged in the valid area (background).\n     * It calls the function indentationSpacesOver to manage indentation spaces of the item being dragged.\n     * @param {Event} e - Click event that triggers item drag.\n     */\n    function dragOverColumn(e) {\n        e.preventDefault();\n        indentationSpacesOver(e);\n    }\n\n    /**\n     * This function gets called whenever an object gets dragged into one of both columns.\n     * When a codeFragment enters another column it gets added as a child of the parent node (column)\n     * @param {*} e - Click event that triggers item drag.\n     */\n    function dragEnterColumn(e) {\n        e.preventDefault();\n        enteringColumn = this;\n        if (leavingColumn !== null && leavingColumn !== enteringColumn) { // Esto quiere decir que se salió de una col y entró a otr\n            if (this.isSameNode(leftColumn)) {\n                leftColumn.appendChild(dragItem);\n                initX = e.clientX;\n                dragItem.currentIndentation = 0;\n                dragItem.style.marginLeft = \"0px\";\n            } else if (this.isSameNode(rightColumn)) {\n                rightColumn.appendChild(dragItem);\n                initX = e.clientX;\n                dragItem.currentIndentation = 0;\n                dragItem.style.marginLeft = \"0px\";\n            }\n        }\n        leavingColumn = null;\n        enteringColumn = null;\n    }\n\n    /**\n     * This function gets called whenever an object gets dragged out of one of both columns.\n     * It sets the variable leavingColumn to the column that has a codeFragment leaving.\n     * @param {*} e - Click event that triggers item drag.\n     */\n    function dragLeaveColumn(e) {\n        e.preventDefault();\n        leavingColumn = this;\n    }\n\n    /**\n     * This function registers the mouse's X coordinate in order to calculate if the item being dragged\n     * should be indented.\n     * @param {Event} e - Click event that triggers item drag.\n     */\n    function indentationSpacesOver(e) {\n        endX = e.clientX;\n        if (endX >= initX + 50) { // Indentations to the right\n            let indentations = Math.floor((endX - initX) / 50);\n            dragItem.style.marginLeft = (((dragItem.currentIndentation + indentations) * 50)) + \"px\";\n            dragItem.currentIndentation = dragItem.currentIndentation + indentations;\n            initX = endX;\n        } else {\n            let indentations = Math.floor((Math.abs(initX - endX)) / 50);\n            if (dragItem.currentIndentation - indentations <= 0) {\n                dragItem.style.marginLeft = \"0px\";\n                dragItem.currentIndentation = 0;\n            } else if (indentations >= 1) { // Indentations to the left\n                dragItem.style.marginLeft = (((dragItem.currentIndentation - indentations) * 50)) + \"px\";\n                dragItem.currentIndentation = dragItem.currentIndentation - indentations;\n                initX = endX;\n            }\n        }\n    }\n\n    /**\n     * It sets the position of the item being dragged to the position of the item being dragged over,\n     * and pushes the item being dragged over up or down depending of the initial position of the item being dragged.\n     * @param {NodeList} neighborhood - NodeList containing draggable codeFragment Nodes\n     */\n    function moveItem(neighborhood) {\n        if (dragItem != draggedOver) {\n            let currentpos = 0;\n            let droppedpos = 0;\n            for (let it = 0; it < neighborhood.length; it++) {\n                if (dragItem == neighborhood[it]) { currentpos = it; }\n                if (draggedOver == neighborhood[it]) { droppedpos = it; }\n            }\n            if (currentpos < droppedpos) { // Whenever dragItem item was higher than draggedOver item\n                dragItem.parentNode.insertBefore(dragItem, draggedOver.nextSibling);\n            } else { // Whenever dragItem item was lower than draggedOver item\n                dragItem.parentNode.insertBefore(dragItem, draggedOver);\n            }\n        }\n    }\n};"],"names":["questionid","answerid","dragItem","draggedOver","initX","endX","leavingColumn","enteringColumn","content","leftColumn","document","getElementById","rightColumn","answerObject","addEventListener","dragOverColumn","dragEnterColumn","dragLeaveColumn","neighborhood","childNodes","answerneighborhood","clickChoice","parentNode","forEach","choice","classList","remove","add","updateAnswer","dragStart","e","clientX","style","pointerEvents","this","dragEnd","value","line","contains","innerHTML","split","contentline","html","txt","repeat","currentIndentation","createElement","slice","dragOver","preventDefault","target","currentpos","droppedpos","it","length","insertBefore","nextSibling","moveItem","indentations","Math","floor","marginLeft","abs","indentationSpacesOver","isSameNode","appendChild","codeFragment","draggable","counter"],"mappings":"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"}